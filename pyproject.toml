# pyproject.toml

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "metalearning"
version = "0.5.0"
description = "Meta-learning with evolving spiking neural networks"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "Ferencz KrisztiÃ¡n", email = "snn@krisz.me" },
]
keywords = ["snn", "spiking-neural-networks", "meta-learning", "computational-neuroscience", "evolutionary-algorithms"]

# This is the main list of dependencies, directly under [project]
dependencies = [
    "numpy>=1.26.4",
    "jax>=0.4.38",
    "jaxlib>=0.4.38",
    "h5py>=3.12.1",
    "matplotlib>=3.10.0",
    "scipy>=1.14.1",
    "tqdm>=4.67.1",
]

# Project URLs are a separate table
[project.urls]
Homepage = "https://github.com/krisztiaan/evo-snn"
Repository = "https://github.com/krisztiaan/evo-snn"

[project.optional-dependencies]
# Dependencies for development: linting, formatting, testing
dev = [
    "ruff>=0.8.6",
    "pytest>=8.3.4",
    "pytest-xdist>=3.6.1",
    "mypy>=1.14.1",
    "pre-commit>=4.0.1",
]

# Dependencies for the Brian2-based models
brian2 = [
    "brian2>=2.8.0",
    "brian2cuda; sys_platform != 'win32'",
]

# Dependencies for advanced visualization
visualization = [
    "plotly>=5.24.1",
    "seaborn>=0.13.2",
    "networkx>=3.4.2",
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.34.0",
    "msgpack>=1.1.0",
    "lz4>=4.3.3",
    "aiofiles>=24.1.0",
    "pandas>=2.2.3",
]

# A combined extra for setting up a full development environment
all = [
    "metalearning[dev,brian2,visualization]",
]

[tool.setuptools.packages.find]
where = ["."]
exclude = ["experiments*", "notebooks*", "tests*"]

# --- Tool Configuration ---

[tool.ruff]
# Set the maximum line length.
line-length = 100
# Same as Black.
# indent-width = 4

[tool.ruff.lint]
# This is the core of the "strongly opinionated" setup.
# We are selecting a large, curated set of rules.
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort (import sorting)
    "UP",  # pyupgrade (modernize Python syntax)
    "B",   # flake8-bugbear (finds likely bugs)
    "A",   # flake8-builtins (prevents shadowing builtins)
    "C4",  # flake8-comprehensions (more idiomatic comprehensions)
    "SIM", # flake8-simplify (refactoring suggestions)
    "C90", # mccabe complexity
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
    "PERF",# flake8-performance (catches performance anti-patterns)
]

# Never enforce `E501` (line-too-long), as `ruff format` will handle it.
ignore = ["E501"]

# These rules are good to know but cannot be auto-fixed.
# You will have to fix them manually after running the auto-fixer.
unfixable = [
    "B008",  # Function call in default argument
    "B017",  # `assertRaises(Exception)`
]

# Allow unused arguments in specific methods (common in overrides).
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Set a reasonable complexity limit. Functions exceeding this should be refactored.
[tool.ruff.lint.mccabe]
max-complexity = 15

# Relax certain rules for test files, which have different patterns.
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",  # `assert` statements are fine in tests
    "B011",  # `assert False` is used for placeholder tests
    "F841",  # Allow unused variables (e.g., for pytest fixtures)
]
"export/example.py" = [
    "T201", # Allow `print` in example files
]


[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"
# Use a hanging indent style.
indent-style = "space"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [".venv", "venv", "build"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
